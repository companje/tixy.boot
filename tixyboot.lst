     1                                  org 0
     2                                  cpu 8086
     3                                  
     4                                  COLS  equ 72
     5                                  TOP   equ 9*4*COLS+20*4    ; row=9,col=20
     6                                  RED   equ 0xf0
     7                                  GREEN equ 0x08
     8                                  BLUE  equ 0xf4
     9                                  
    10                                  ; using dx and bx registers as t,i,x,y variables
    11                                  %define t dh
    12                                  %define i dl
    13                                  %define x bh
    14                                  %define y bl
    15                                  
    16 00000000 EB3A                    jmp setup
    17                                  
    18                                  fx_table:      
    19 00000002 [0A][0F][18][1F]-           db fx0,fx1,fx2,fx3,fx4,fx5,fx0,fx1
    19 00000006 [2A][35][0A][0F]   
    20                                  
    21                                  fx0: ; y+t
    22 0000000A 88D8                        mov al,y
    23 0000000C 00F0                        add al,t
    24 0000000E C3                          ret
    25                                  
    26                                  fx1: ; xor
    27 0000000F 88F8                        mov al,x
    28 00000011 30D8                        xor al,y
    29 00000013 00F0                        add al,t
    30 00000015 2C07                        sub al,7
    31 00000017 C3                          ret
    32                                  
    33                                  fx2: ; sin(x+y+t)
    34 00000018 88F8                        mov al,x
    35 0000001A 00D8                        add al,y
    36 0000001C 00F0                        add al,t
    37                                      ; call sin
    38 0000001E C3                          ret
    39                                  
    40                                  fx3: ; bitmap_data[i+t]
    41 0000001F 53                          push bx
    42 00000020 88D0                        mov al,i
    43 00000022 00F0                        add al,t
    44 00000024 BB[D500]                    mov bx,bitmap_data
    45 00000027 D7                          xlat
    46 00000028 5B                          pop bx
    47 00000029 C3                          ret
    48                                  
    49                                  fx4: ; ((y-x)*-8)+t
    50 0000002A 88D8                        mov al,y
    51 0000002C 28F8                        sub al,x
    52 0000002E B1F8                        mov cl,-8
    53 00000030 F6E1                        mul cl
    54                                      ; call limit
    55 00000032 00F0                        add al,t
    56 00000034 C3                          ret
    57                                  
    58                                  fx5: 
    59 00000035 88F8                        mov al,x
    60 00000037 00D8                        add al,y
    61 00000039 00F0                        add al,t
    62 0000003B C3                          ret
    63                                  
    64                                  setup:                      ; starting point of code
    65                                  
    66 0000003C 31ED                        xor bp,bp
    67                                  
    68                                  generate_chars:
    69 0000003E 0E                          push cs
    70 0000003F 1F                          pop ds                  ; ds:si in code segment
    71 00000040 0E                          push cs
    72 00000041 07                          pop es                  ; es:di in code segment
    73                                  
    74 00000042 BF[D500]                    mov di,bitmap_data
    75                                  
    76 00000045 B90001                      mov cx,16*4*4
    77 00000048 B8FFFF                      mov ax,-1
    78                                      .lp:
    79 0000004B F7C10300                        test cx,3
    80 0000004F 7502                            jnz .sk
    81 00000051 D1E8                            shr ax,1
    82                                          .sk
    83 00000053 AB                              stosw
    84 00000054 AB                              stosw
    85 00000055 E2F4                        loop .lp
    86                                  
    87 00000057 31D2                        xor dx,dx               ; t=i=0 (clear time and index)
    88                                  
    89                                  draw:
    90 00000059 83E507                      and bp,7
    91 0000005C BF700A                      mov di,TOP              ; left top corner to center tixy
    92                                  dot:
    93 0000005F 88D0                        mov al,i                ; al=index
    94 00000061 30E4                        xor ah,ah               ; ah=0
    95 00000063 B110                        mov cl,16
    96 00000065 F6F1                        div cl                  ; calculate x and y from i
    97 00000067 93                          xchg ax,bx              ; bh=x, bl=y
    98                                  
    99                                    .cont:
   100                                     
   101 00000068 55                          push bp
   102 00000069 53                          push bx
   103 0000006A 87EB                        xchg bx,bp
   104 0000006C 8A9F[0200]                  mov bl,[bx+fx_table]
   105 00000070 30FF                        xor bh,bh
   106 00000072 87EB                        xchg bx,bp
   107 00000074 5B                          pop bx
   108 00000075 FFD5                        call bp                 ; call the effect function
   109                                      
   110                                      ; out 0x3a,al
   111                                  
   112 00000077 5D                          pop bp
   113                                   
   114                                  draw_char_color:
   115 00000078 3C00                        cmp al,0
   116 0000007A 9C                          pushf
   117 0000007B 7D02                        jge .red
   118 0000007D F6D8                        neg al
   119                                    .red:
   120 0000007F B900F0                      mov cx,RED << 8              ; ch=0xf0, cl=0
   121 00000082 E82C00                      call draw_char
   122 00000085 9D                          popf
   123 00000086 7D02                        jge .green_blue
   124 00000088 30C0                        xor al,al               ; if negative then just red so clear (al=0) green and blue
   125                                    .green_blue:
   126 0000008A B508                        mov ch,GREEN
   127 0000008C E82200                      call draw_char
   128 0000008F B5F4                        mov ch,BLUE
   129 00000091 E81D00                      call draw_char
   130                                    .next:  
   131 00000094 FEC2                        inc i                   ; i++
   132                                      ; add i,3
   133                                  
   134 00000096 83C708                      add di,8         
   135 00000099 80FF0F                      cmp x,15
   136 0000009C 7CC1                        jl dot                  ; next col
   137 0000009E 81C7C001                    add di,4*COLS+160       
   138 000000A2 80FB0F                      cmp y,15
   139 000000A5 7CB8                        jl dot                  ; next line
   140 000000A7 FEC6                        inc t
   141 000000A9 80E61F                      and t,31
   142 000000AC 75AB                        jnz draw                 ; next frame
   143 000000AE 45                          inc bp                  ; inc effect
   144                                    
   145 000000AF EBA8                        jmp draw
   146                                  
   147                                  draw_char:                  ; es:di=vram (not increasing), al=char 0..15, destroys cx
   148 000000B1 50                          push ax
   149 000000B2 57                          push di
   150                                  
   151 000000B3 51                          push cx
   152 000000B4 07                          pop es                  ; es=bp (color channel now cx)
   153 000000B5 0E                          push cs
   154 000000B6 1F                          pop ds                  ; ds=cs
   155                                  
   156 000000B7 B90400                      mov cx,4
   157 000000BA 51                          push cx
   158 000000BB 51                          push cx
   159                                  
   160 000000BC 240F                        and al,15               ; limit al to 15
   161 000000BE 98                          cbw                     ; ah=0
   162                                     
   163 000000BF D2E0                        shl al,cl               ; al*=16
   164 000000C1 05[D500]                    add ax,bitmap_data
   165 000000C4 89C6                        mov si,ax              ; si = source address of rendered bitmap char
   166                                  
   167 000000C6 59                          pop cx                  ;cx=4
   168 000000C7 F3A5                        rep movsw
   169 000000C9 81C71801                    add di,4*COLS-8
   170                                  
   171 000000CD 59                          pop cx                  ;cx=4
   172                                  
   173 000000CE 89C6                        mov si,ax 
   174 000000D0 F3A5                        rep movsw
   175                                  
   176 000000D2 5F                          pop di                    
   177 000000D3 58                          pop ax
   178 000000D4 C3                          ret
   179                                  
   180                                  %assign num $-$$
   181                                  %warning total num
   181          ******************       warning: total 213 [-w+user]
   182                                  
   183                                  bitmap_data:                          ; destination for 128 bytes rendered bitmap data
   184                                  
   185 000000D5 00<rep 2CF2Bh>          times (180*1024)-num db  0                 ; fill up with zeros until file size=180k
