     1                                  org 0
     2                                  cpu 8086
     3                                  bits 16
     4                                  default rel
     5                                  
     6                                  COLS  equ 72
     7                                  TOP   equ 9*4*COLS+20*4    ; row=9,col=20
     8                                  RED   equ 0xf0
     9                                  GREEN equ 0x08
    10                                  BLUE  equ 0xf4
    11                                  
    12                                  ; using dx and bx registers as t,i,x,y variables
    13                                  %define t dh
    14                                  %define i dl
    15                                  %define x bh
    16                                  %define y bl
    17                                  
    18 00000000 EB21                    jmp setup
    19                                  
    20                                  fx_table:
    21 00000002 [0A][0B][0B][13]-           db fx_pulse, fx_spinner, fx_spinner, fx_checker, fx_checker, fx_sphere, fx_sphere, fx_pulse
    21 00000006 [13][1A][1A][0A]   
    22                                  
    23                                  fx_pulse:
    24 0000000A C3                          ret
    25                                  
    26                                  fx_spinner:
    27 0000000B 80EF08                      sub x, 8
    28 0000000E F6E7                        mul x
    29 00000010 00D8                        add al, y
    30 00000012 C3                          ret
    31                                  
    32                                  fx_checker:
    33 00000013 88F8                        mov al,x
    34 00000015 30D8                        xor al,y
    35 00000017 00F0                        add al,t
    36 00000019 C3                          ret
    37                                  
    38                                  fx_sphere:
    39 0000001A 88F8                        mov al,x
    40 0000001C FEC0                        inc al
    41 0000001E F6E3                        mul y
    42 00000020 00F0                        add al,t
    43 00000022 C3                          ret
    44                                  
    45                                  setup:                      ; starting point of code
    46                                                              ; generate_chars
    47 00000023 0E                          push cs
    48 00000024 1F                          pop ds                  ; ds:si in code segment
    49 00000025 0E                          push cs
    50 00000026 07                          pop es                  ; es:di in code segment
    51                                  
    52                                      ; We're building 16 characters, of which 8 are copies, and 2 empty
    53                                      ; 1st character is pre-made, 8th character is empty
    54                                      ; generate 7 characters, then copy and flip
    55                                  
    56 00000027 B107                        mov cl, 7
    57 00000029 BE[D700]                    mov si, bitmap_data         ; original character
    58 0000002C BF[E700]                    mov di, bitmap_data + (4*4) ; new character
    59                                  .character:
    60 0000002F 51                          push cx
    61 00000030 B108                        mov cl, 8       ; copy 8 16bit values, characters are 4 * 4 bytes
    62 00000032 F3A5                        rep movsw
    63                                  
    64 00000034 56                          push si         ; We've copied the previous character, si now points at our new character
    65 00000035 B102                        mov cl, 2
    66                                  .shrink_half:       ;shrink top and bottom half of character
    67 00000037 51                          push cx
    68 00000038 B104                        mov cl, 4
    69                                  .stripe:            ; shrink even and uneven lines
    70 0000003A D02C                        shr byte [si+0], 1
    71 0000003C D06404                      shl byte [si+4], 1
    72 0000003F 46                          inc si
    73 00000040 E2F8                        loop .stripe
    74 00000042 59                          pop cx
    75                                  
    76 00000043 83C604                      add si, 4
    77 00000046 E2EF                        loop .shrink_half
    78                                  
    79 00000048 5E                          pop si
    80 00000049 59                          pop cx
    81 0000004A E2E3                        loop .character
    82                                  
    83 0000004C B108                        mov cl, 8
    84                                  .reverse:       ; copy characters in reverse
    85 0000004E 51                          push cx
    86 0000004F B108                        mov cl, 8
    87 00000051 F3A5                        rep movsw
    88 00000053 83EE20                      sub si, 16*2
    89 00000056 59                          pop cx
    90 00000057 E2F5                        loop .reverse
    91                                  
    92                                      ; AL is still 0 here, use it to make an empty character
    93 00000059 B110                        mov cl, 16
    94 0000005B F3AA                        rep stosb
    95                                  
    96                                  init:
    97 0000005D 31ED                        xor bp,bp
    98 0000005F 31D2                        xor dx,dx               ; t=i=0 (clear time and index)
    99                                  
   100                                  draw:
   101 00000061 83E507                      and bp,7                ; wrap fx index
   102 00000064 55                          push bp
   103 00000065 3E8A5E[02]                  mov bl,[byte ds:bp+fx_table] ;change bp from index to address
   104 00000069 30FF                        xor bh,bh
   105 0000006B 53                          push bx
   106 0000006C 5D                          pop bp
   107                                  
   108 0000006D BF700A                      mov di,TOP              ; left top corner to center tixy
   109                                  dot:
   110 00000070 88D0                        mov al,i                ; al=index
   111 00000072 88F3                        mov bl,t
   112 00000074 30E4                        xor ah,ah               ; ah=0
   113 00000076 B110                        mov cl,16
   114 00000078 F6F1                        div cl                  ; calculate x and y from i
   115 0000007A 93                          xchg bx,ax               ; bh = x : bl = y, al = t
   116                                  
   117                                  
   118 0000007B 53                          push bx
   119                                      ; cx is free, ah = 0, al = t, bx used for X and Y
   120 0000007C FFD5                        call bp                 ; call the effect function
   121 0000007E 5B                          pop bx
   122 0000007F 240F                        and al,15 ;maybe 31?
   123                                  
   124                                  draw_char_color:
   125 00000081 3C08                        cmp al, 8 ; maybe 15?
   126 00000083 9C                          pushf
   127                                    .red:
   128 00000084 B104                        mov cl, 4
   129 00000086 240F                        and al,15           ; limit al to 15
   130 00000088 98                          cbw                 ; ah=0
   131 00000089 D2E0                        shl al,cl           ; al*=16
   132 0000008B 05[D700]                    add ax,bitmap_data
   133 0000008E B100                        mov cl, 0
   134                                  
   135 00000090 B5F0                        mov ch, RED
   136 00000092 E82E00                      call draw_char
   137                                  
   138 00000095 9D                          popf
   139 00000096 7D03                        jge .blue_green
   140 00000098 B8[D701]                    mov ax, bitmap_data + 16 * 16  ; swap to an empty character so green and blue are cleared, leaving only red
   141                                  
   142                                    .blue_green:
   143 0000009B B5F4                        mov ch, BLUE
   144 0000009D E82300                      call draw_char
   145 000000A0 B508                        mov ch, GREEN
   146 000000A2 E81E00                      call draw_char
   147                                  
   148                                    .next:
   149 000000A5 FEC2                        inc i                   ; i++
   150                                  
   151 000000A7 83C708                      add di,8
   152 000000AA 80FF0F                      cmp x,15
   153 000000AD 7CC1                        jl dot                  ; next col
   154 000000AF 81C7C001                    add di,4*COLS+160
   155 000000B3 80FB0F                      cmp y,15
   156 000000B6 7CB8                        jl dot                  ; next line
   157 000000B8 FEC6                        inc t
   158 000000BA 80E61F                      and t,31
   159 000000BD 5D                          pop bp                  ; change bp back to index
   160 000000BE 75A1                        jnz draw                ; next frame
   161 000000C0 45                          inc bp                  ; inc effect
   162 000000C1 EB9E                        jmp draw                ; next frame
   163                                  
   164                                  draw_char:                  ; es:di=vram (not increasing), al=char 0..15, destroys cx
   165 000000C3 57                          push di
   166                                  
   167 000000C4 51                          push cx
   168 000000C5 07                          pop es                  ; es (color channel was in cx)
   169                                  
   170 000000C6 89C6                        mov si,ax              ; si = source address of rendered bitmap char
   171                                  
   172 000000C8 B90400                      mov cx,4
   173 000000CB 51                          push cx
   174 000000CC F3A5                        rep movsw
   175                                  
   176 000000CE 81C71801                    add di,4*COLS-8         ; move 2 rows down, and back by 8 bytes back.
   177 000000D2 59                          pop cx                  ;cx=4
   178 000000D3 F3A5                        rep movsw
   179                                  
   180 000000D5 5F                          pop di
   181 000000D6 C3                          ret
   182                                  
   183                                  bitmap_data:                ; destination for 128 bytes rendered bitmap data, initial character filled
   184                                      ;db 00000000b, 00000111b, 00011111b, 01111111b, 00000000b, 11100000b, 11111000b, 11111110b
   185                                      ;db 01111111b, 00011111b, 00000111b, 00000000b, 11111110b, 11111000b, 11100000b, 00000000b
   186 000000D7 000F3FFF00F0FCFF            db 00000000b, 00001111b, 00111111b, 11111111b, 00000000b, 11110000b, 11111100b, 11111111b
   187 000000DF FF3F0F00FFFCF000            db 11111111b, 00111111b, 00001111b, 00000000b, 11111111b, 11111100b, 11110000b, 00000000b
   188                                  
   189                                  
   190                                  %assign num $-$$
   191                                  %warning total num
   191          ******************       warning: total 231 [-w+user]
   192                                  %if num > 256
   193                                      %error program too large
   194                                  %endif
   195                                  
   196 000000E7 00<rep 2CF19h>          times (180*1024)-num db  0                 ; fill up with zeros until file size=180k
