     1                                  ; tixyboot.asm by Rick Companje, 2021-2022, MIT licence
     2                                  ; a tribute to Martin Kleppe's beautiful https://tixy.land
     3                                  ; as well as a tribute to the Sanyo MBC-550/555 PC (1984)
     4                                  ; which forced me to be creative with code since 1994.
     5                                  ;
     6                                  ; The Sanyo MBC-55x has a very limited ROM BIOS. After some 
     7                                  ; hardware setup by the ROM BIOS a RAM BIOS loaded from
     8                                  ; floppy takes over. This means that we don't have any BIOS
     9                                  ; functions when running our own code from the bootsector. 
    10                                  ;
    11                                  ; The Sanyo has no display mode 13 (not even with the original
    12                                  ; RAM BIOS). It uses a 6845 video chip with three bitmapped 
    13                                  ; graphics planes and is organized as 50 rows by 72 (or 80) columns.
    14                                  ; One column consists of 4 bytes. Then the next column starts.
    15                                  ; After 72 columns a new row starts. A bitmap of 16x8 pixels 
    16                                  ; is made up of 2 columns on row 1 and 2 columns on row 2...
    17                                  ;
    18                                  ; To run this code write the compiled code to the bootsector of a
    19                                  ; Sanyo MBC-55x floppy or use an emulator like the one written
    20                                  ; in Processing/Java in this repo.
    21                                  ;
    22                                  ; Add your own visuals by adding your own functions to the fx_table.
    23                                  ;
    24                                  ; t = time  0..255
    25                                  ; i = index 0..255
    26                                  ; x = x-pos 0..15
    27                                  ; y = y-pos 0..15
    28                                  ;
    29                                  ; result: al -15..15 (size and color)
    30                                  ;         al<0 red, al>0 white
    31                                  
    32                                  org 0
    33                                  cpu 8086
    34                                  
    35                                  COLS  equ 72
    36                                  TOP   equ 9*4*COLS+20*4    ; row=9,col=20
    37                                  RED   equ 0xf0
    38                                  GREEN equ 0x08
    39                                  BLUE  equ 0xf4
    40                                  
    41                                  ; effect_timeout equ 20      ; every 30 frames another effect
    42                                  ; isqrt_table    equ 1000    ; available location in code segment
    43                                  ; NUM_EFFECTS equ 6
    44                                  
    45                                  
    46                                  ; using dx and bx registers as t,i,x,y variables
    47                                  %define t dh
    48                                  %define i dl
    49                                  %define x bh
    50                                  %define y bl
    51                                  
    52 00000000 EB3A                    jmp setup
    53                                  
    54                                  fx_table:      
    55 00000002 [0A][0F][18][1F]-           db fx0,fx1,fx2, fx3,fx4,fx5,fx0, fx1
    55 00000006 [2A][35][0A][0F]   
    56                                      ; db fx0,fx0,fx0,fx0,fx0
    57                                  
    58                                  ; sin_table: ;31 bytes, (input -15..15 index=0..31)
    59                                  ;     db 0,-3,-6,-9,-11,-13,-15,-15,-15,-15,-13,-11,-9,-6,-3,
    60                                  ;     db 0, 3, 6, 9, 11, 13, 15, 15, 15, 15, 13, 11, 9, 6, 3,0  
    61                                  ;     ; tried to mirror the second line of the sine table with code 
    62                                      ; but would take a same of amount of bytes
    63                                  
    64                                  
    65                                  fx0: ; y+t
    66 0000000A 88D8                        mov al,y
    67 0000000C 00F0                        add al,t
    68 0000000E C3                          ret
    69                                  
    70                                  fx1: ; xor
    71 0000000F 88F8                        mov al,x
    72 00000011 30D8                        xor al,y
    73 00000013 00F0                        add al,t
    74 00000015 2C07                        sub al,7
    75                                  
    76                                      ; cmp i,128
    77                                      ; jne .r
    78                                  .r:
    79 00000017 C3                          ret
    80                                  
    81                                  fx2: ; sin(x+y+t)
    82 00000018 88F8                        mov al,x
    83 0000001A 00D8                        add al,y
    84 0000001C 00F0                        add al,t
    85                                      ; call sin
    86 0000001E C3                          ret
    87                                  
    88                                  fx3: ; bitmap_data[i+t]
    89 0000001F 53                          push bx
    90 00000020 88D0                        mov al,i
    91 00000022 00F0                        add al,t
    92 00000024 BB[D300]                    mov bx,bitmap_data
    93 00000027 D7                          xlat
    94 00000028 5B                          pop bx
    95 00000029 C3                          ret
    96                                  
    97                                  fx4: ; ((y-x)*-8)+t
    98 0000002A 88D8                        mov al,y
    99 0000002C 28F8                        sub al,x
   100 0000002E B1F8                        mov cl,-8
   101 00000030 F6E1                        mul cl
   102                                      ; call limit
   103 00000032 00F0                        add al,t
   104 00000034 C3                          ret
   105                                  
   106                                  fx5: ; sin(sqrt(x^2+y^2))-t)
   107                                      ; mov al,i   ; isqrt_table[i] = sqrt(x^2+y^2)
   108                                      ; push bx
   109                                      ; mov bx,isqrt_table
   110                                      ; xlat
   111                                      ; pop bx
   112                                      ; sub al,t
   113                                      ; call sin
   114 00000035 88F8                        mov al,x
   115 00000037 00D8                        add al,y
   116 00000039 00F0                        add al,t
   117                                      
   118                                      ; mov cl,3
   119                                      ; shl al,cl
   120                                      ; times 4 add al,t
   121                                  
   122                                      ; cbw
   123                                      ; xor al,ah
   124                                      ; mov cl,2
   125                                      ; shr al,cl
   126                                  
   127                                      ; call wrap
   128                                      ; call sin
   129 0000003B C3                          ret
   130                                  
   131                                  ; sin: ; sine function
   132                                  ;     call wrap
   133                                  ;     push bx
   134                                  ;     add al,15 ; sin(-15) = sin_table[0]
   135                                  ;     mov bx,sin_table
   136                                  ;     xlat 
   137                                  ;     pop bx
   138                                  ;     ret
   139                                  
   140                                  ; wrap: ; while (al>15) al-=15; while (al<-15) al+=15
   141                                  ;     cmp al,15
   142                                  ;     jg .sub16
   143                                  ;     cmp al,-15
   144                                  ;     jl .add16
   145                                  ;     ret
   146                                  ;   .sub16:
   147                                  ;     sub al,31
   148                                  ;     jmp wrap
   149                                  ;   .add16:
   150                                  ;     add al,31
   151                                  ;     jmp wrap
   152                                  
   153                                  
   154                                  
   155                                  
   156                                  ; limit: ; if (al>15) al=15; else if (al<-15) al=-15;
   157                                  ;     cmp al,15
   158                                  ;     jg .pos16
   159                                  ;     cmp al,-15
   160                                  ;     jnl .ret
   161                                  ;     mov al,-15
   162                                  ;     ret
   163                                  ;   .pos16:
   164                                  ;     mov al,15
   165                                  ;   .ret:
   166                                  ;     ret
   167                                  
   168                                  ; calc_isqrt_xx_yy: ; isqrt_table[i] = sqrt(x^2+y^2)
   169                                  ;     push dx
   170                                  ;     push di
   171                                  ;     mov di,isqrt_table      ; di=isqrt_table[0]
   172                                  ;     add di,dx               ; di+=i
   173                                  ;     mov al,x
   174                                  ;     inc al
   175                                  ;     mul al                  ; x*x
   176                                  ;     xchg ax,cx
   177                                  ;     mov al,y
   178                                  ;     inc al
   179                                  ;     mul al                  ; y*y
   180                                  ;     add ax,cx               ; + 
   181                                  ;   .isqrt:  ; while((L+1)^2<=y) L++; return L
   182                                  ;     xchg cx,ax              ; cx=y
   183                                  ;     xor ax,ax               ; ax=L=0
   184                                  ;   .loop:
   185                                  ;     inc ax
   186                                  ;     push ax
   187                                  ;     mul ax
   188                                  ;     cmp ax,cx
   189                                  ;     pop ax
   190                                  ;     jl .loop
   191                                  ;     dec ax
   192                                  ;   .end_isqrt:
   193                                  ;     mov [di],al             ; store al
   194                                  ;     pop di
   195                                  ;     pop dx
   196                                  ;     ret
   197                                  
   198                                  setup:                      ; starting point of code
   199                                  
   200                                  generate_chars:
   201 0000003C 0E                          push cs
   202 0000003D 1F                          pop ds                  ; ds:si in code segment
   203 0000003E 0E                          push cs
   204 0000003F 07                          pop es                  ; es:di in code segment
   205                                  
   206 00000040 BF[D300]                    mov di,bitmap_data
   207                                  
   208 00000043 B90001                      mov cx,16*4*4
   209 00000046 B8FFFF                      mov ax,-1
   210                                      .lp:
   211 00000049 F7C10300                        test cx,3
   212 0000004D 7502                            jnz .sk
   213 0000004F D1E8                            shr ax,1
   214                                          .sk
   215 00000051 AB                              stosw
   216 00000052 AB                              stosw
   217 00000053 E2F4                        loop .lp
   218                                  
   219                                  ;     mov si,img
   220                                  ;     mov cl,12
   221                                  ; .lp:
   222                                  ;     push cx
   223                                  ;     mov cl,3
   224                                  ; .lp2:
   225                                  ;     push si
   226                                  ;     movsw
   227                                  ;     movsw
   228                                  ;     pop si
   229                                  ;     loop .lp2
   230                                  ;     pop cx
   231                                  ;     movsw
   232                                  ;     movsw
   233                                  ;     loop .lp
   234                                  
   235                                      ; mov cl,8
   236                                      ; mov ax,-1
   237                                      ; rep stosw
   238                                  
   239                                      ; ret
   240                                  
   241                                  
   242                                      ;no need to clear the screen. ROM BIOS does this already.
   243                                  
   244                                      ;set ds and es segments to cs
   245                                      ; push cs
   246                                      ; pop ds                  ; ds:si in code segment
   247                                      ; push cs
   248                                      ; pop es                  ; es:di in code segment
   249                                  
   250                                      ; generate 16x8 bitmap data for 16 sizes of dots.
   251                                      ; Because the dots are symmetric we can save at least
   252                                      ; 97 bytes by mirroring the left-top corner 3 times
   253                                  
   254                                      ; call generate_chars
   255                                  
   256                                      ; xor bp,bp               ; start with effect 0
   257 00000055 31D2                        xor dx,dx               ; t=i=0 (clear time and index)
   258                                  
   259                                  draw:
   260 00000057 83E507                      and bp,7
   261 0000005A BF700A                      mov di,TOP              ; left top corner to center tixy
   262                                  dot:
   263                                      ; push dx
   264 0000005D 88D0                        mov al,i                ; al=index
   265 0000005F 30E4                        xor ah,ah               ; ah=0
   266 00000061 B110                        mov cl,16
   267 00000063 F6F1                        div cl                  ; calculate x and y from i
   268 00000065 93                          xchg ax,bx              ; bh=x, bl=y
   269                                      ; pop dx
   270                                  
   271                                      ;on the first frame calc sqrt table for every i
   272                                      ;reusing the i,x,y loop here. this saves some bytes.
   273                                      ; or t,t
   274                                      ; jnz .cont
   275                                      ; call calc_isqrt_xx_yy
   276                                    .cont:
   277                                     
   278 00000066 55                          push bp
   279 00000067 53                          push bx
   280 00000068 87EB                        xchg bx,bp
   281 0000006A 8A9F[0200]                  mov bl,[bx+fx_table]
   282 0000006E 30FF                        xor bh,bh
   283 00000070 87EB                        xchg bx,bp
   284 00000072 5B                          pop bx
   285 00000073 FFD5                        call bp                 ; call the effect function
   286                                      
   287                                      ; out 0x3a,al
   288                                  
   289 00000075 5D                          pop bp
   290                                   
   291                                  draw_char_color:
   292 00000076 3C00                        cmp al,0
   293 00000078 9C                          pushf
   294 00000079 7D02                        jge .red
   295 0000007B F6D8                        neg al
   296                                    .red:
   297 0000007D B900F0                      mov cx,RED << 8              ; ch=0xf0, cl=0
   298 00000080 E82C00                      call draw_char
   299 00000083 9D                          popf
   300 00000084 7D02                        jge .green_blue
   301 00000086 30C0                        xor al,al               ; if negative then just red so clear (al=0) green and blue
   302                                    .green_blue:
   303 00000088 B508                        mov ch,GREEN
   304 0000008A E82200                      call draw_char
   305 0000008D B5F4                        mov ch,BLUE
   306 0000008F E81D00                      call draw_char
   307                                    .next:  
   308 00000092 FEC2                        inc i                   ; i++
   309                                      ; add i,3
   310                                  
   311 00000094 83C708                      add di,8         
   312 00000097 80FF0F                      cmp x,15
   313 0000009A 7CC1                        jl dot                  ; next col
   314 0000009C 81C7C001                    add di,4*COLS+160       
   315 000000A0 80FB0F                      cmp y,15
   316 000000A3 7CB8                        jl dot                  ; next line
   317 000000A5 FEC6                        inc t
   318 000000A7 80E61F                      and t,31
   319                                      ; add t,4
   320                                      ; cmp t,effect_timeout
   321 000000AA 75AB                        jnz draw                 ; next frame
   322 000000AC 45                          inc bp                  ; inc effect
   323                                      ; xor t,t                 ; reset time
   324                                      ; cmp bp,NUM_EFFECTS                 
   325                                      
   326                                      ; jl draw                 ; next effect
   327                                      ; xor bp,bp               ; reset effect
   328 000000AD EBA8                        jmp draw
   329                                  
   330                                  draw_char:                  ; es:di=vram (not increasing), al=char 0..15, destroys cx
   331 000000AF 50                          push ax
   332 000000B0 57                          push di
   333                                  
   334 000000B1 51                          push cx
   335 000000B2 07                          pop es                  ; es=bp (color channel now cx)
   336 000000B3 0E                          push cs
   337 000000B4 1F                          pop ds                  ; ds=cs
   338                                  
   339 000000B5 B90400                      mov cx,4
   340 000000B8 51                          push cx
   341 000000B9 51                          push cx
   342                                  
   343 000000BA 240F                        and al,15               ; limit al to 15
   344 000000BC 98                          cbw                     ; ah=0
   345                                     
   346 000000BD D2E0                        shl al,cl               ; al*=16
   347 000000BF 05[D300]                    add ax,bitmap_data
   348 000000C2 89C6                        mov si,ax              ; si = source address of rendered bitmap char
   349                                  
   350 000000C4 59                          pop cx                  ;cx=4
   351 000000C5 F3A5                        rep movsw
   352 000000C7 81C71801                    add di,4*COLS-8
   353                                  
   354 000000CB 59                          pop cx                  ;cx=4
   355                                  
   356 000000CC 89C6                        mov si,ax 
   357 000000CE F3A5                        rep movsw
   358                                  
   359 000000D0 5F                          pop di                    
   360 000000D1 58                          pop ax
   361 000000D2 C3                          ret
   362                                  
   363                                  
   364                                  
   365                                  img:
   366                                      ; incbin "Tixy-mini-char-Sheet.spr"
   367                                  
   368                                  %assign num $-$$
   369                                  %warning total num
   369          ******************       warning: total 211 [-w+user]
   370                                  
   371                                  bitmap_data:                          ; destination for 128 bytes rendered bitmap data
   372                                  
   373 000000D3 00<rep 2CF2Dh>          times (180*1024)-num db  0                 ; fill up with zeros until file size=360k
